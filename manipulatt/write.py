# manipulatt - v2021.01.14
#File write functions for prismatic and xyz 
import os
import numpy as np
import itertools as it

# pymatgen tools
try:
    from pymatgen.io.xyz import XYZ
except ImportError:
    print('Please install pymatgen before proceeding')


def write_xyz(structure, filename):
    '''
    write structure file in xyz (pymatgen) format
    
    Accepts:
            structure:            pymatgen structure of unit cell/supercells
            filename:             string with filename.xyz
    '''
    
    xyz = XYZ(structure)
    xyz.write_file(filename=filename)
    
def write_atoms(structure):
    
    '''
    write structure file in numpy arrays
    
    Accepts:
            structure:            pymatgen structure of unit cell/supercells
            
    Returns:
            atoms:                numpy array of shape (number of atoms, 4), first three columns are
                                  atomic coordinates and 4th column is the atomic number of specific 
                                  chemical elements
    '''
    
    pos = structure.cart_coords
    num_atoms = structure.cart_coords.shape[0]
    elements = np.asarray(structure.atomic_numbers).reshape((num_atoms,1))
    
    print('Writing atomic coordinates... \n')
    
    atoms = np.hstack((pos,elements))
    mind = np.min(atoms,axis=0)
    maxd = np.max(atoms,axis=0)
    
    print('Number of elements is: {} and atomic numbers are: {} \n' .format(np.unique(elements).shape[0],np.unique(elements)))
    print('atomic coordinate dimensions, minX: {} maxX: {} \n' .format(mind[0],maxd[0]))
    print('atomic coordinate dimensions, minY: {} maxY: {} \n' .format(mind[1],maxd[1]))
    print('atomic coordinate dimensions, minZ: {} maxZ: {} \n' .format(mind[2],maxd[2]))
    
    return atoms

def write_xyz_prism(elements, coords, uc, dw=None, occ=None, return_array=False, fname="atoms.xyz", comment_string="xyz generated by manipulatt - v2021.01.14"):
    
    '''
    write structure file in prismatic xyz format for use in prismatic/multislice pipeline
    
    Accepts:
            elements:            array of shape (number of atoms, 1) of atomic numbers
            coords:              array of shape (number of atoms, 3) of atomic coordinates
            uc:                  array of shape (3,) boundaries of the cell (cell dimension)
            dw:                  array of shape (number of atoms, 1) of Debye-Waller factors (default: 1.0) 
            occ:                 array of shape (number of atoms, 1) of occupancy number (default: 1.0) 
            return_array:        boolean (default: False) flag to specify return atomic coord array
            fname:               string (default: atoms.xyz) of the filename to save
            comment_string:      string (optional) to include at the beginning of xyz structure file
    Return:
            out_coords:          array of shape (number of atoms, 6) of atomic numbers, atomic coordinates
                                 atomic occupancy and Debye-Waller factor 
    '''

    #check for valid inputs
    assert(len(coords.shape)==2), "Coordinates must be two dimensional array with shape (N,3)"
    assert(coords.shape[1]==3), "Coordinates must be two dimensional array with shape (N,3)"

    assert(coords.shape[0]==len(elements)), "Input array lengths do not match"

    if dw is None:
        dw = np.ones(coords.shape[0])
    else:
        assert(coords.shape[0]==len(dw)), "Input array lengths do not match"
        
    if occ is None:
        occ = np.ones(coords.shape[0])
    else:
        assert(coords.shape[0]==len(occ)), "Input array lengths do not match"

    assert(len(uc)==3), "Unit cell dimensions must be array with length 3"

    #combine arrays to iterate and write to file
    out_coords = np.hstack([elements, coords, occ[:,None], dw[:,None]])
    with open(fname,'w') as f:
        f.write(comment_string+"\n")
        f.write("%9.6f %9.6f %9.6f\n" % (uc[0], uc[1], uc[2]))
        for pos in out_coords:
            f.write("%i %9.6f %9.6f %9.6f %7.6f %7.6f\n" % (pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]))
        f.write("-1")
        f.close()
        
    if return_array:
        return(out_coords)